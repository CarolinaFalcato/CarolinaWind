@using QEnergy.API.Models.Login;
@using QEnergy.API.TextResources;
@model LoginViewModel

@{
    ViewBag.Title = TextResources.Login_Title;
    var returnUrl = Context.Request.Query["returnUrl"];
}

<div class="container">

    <div class="spacer" style="height: 100px;"></div>

    <div class="row justify-content-center align-content-center">
        <div class="col-xl-5 col-md-8">
            <form asp-controller="Login" asp-action="Login" asp-route-returnUrl="@returnUrl" method="post" class="bg-white rounded shadow-5-strong p-5">
                @Html.AntiForgeryToken()  @*this is for prevent CSRF attack*@

                <div class="text-center mb-3">
                    <img id="imageLogo" src="/img/logo.png" style="max-height:35px;">
                </div>

                <!-- Username input -->
                <div class="mb-4">
                    <div class="form-outline">
                        @Html.TextBoxFor(model => Model.Username, new { @class = "form-control", id = "username", required = "required" })
                        @Html.LabelFor(model => Model.Username, @TextResources.Login_Username, new { Class = "form-label" })
                    </div>
                    @Html.ValidationMessageFor(a => a.Username, TextResources.Base_RequiredField)
                </div>

                <!-- Password input -->
                <div class="mb-4">
                    <div class="input-group d-flex">
                        <div class="form-outline flex-grow-1">
                            @Html.PasswordFor(model => model.Password, new { @class = "form-control", id = "password", required = "required" })
                            @Html.LabelFor(model => model.Password, @TextResources.Login_Password, new { Class = "form-label" })
                        </div>
                        <button id="show_password" class="btn btn-default" type="button">
                            <i class="fa fa-eye-slash fa-lg icon" id="passwordIcon"></i>
                        </button>
                    </div>
                    @Html.ValidationMessageFor(a => a.Password, @TextResources.Base_RequiredField)
                </div>

                <div class="row mb-4">
                    <div class="col d-flex">
                        <!-- Checkbox -->
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" value="" id="rememberPassword" checked />
                            <label class="form-check-label" for="rememberPassword">
                                @TextResources.Login_RememberPassword
                            </label>
                        </div>
                    </div>

                    <div class="col text-end">
                        <a href="#">@TextResources.Login_ForgotPassword</a>
                    </div>
                </div>
                @Html.ValidationSummary(true, "", new { @class = "text-danger demo" })

                <button type="submit" class="btn btn-default btn-block">@TextResources.Login_SignIn</button>
            </form>
        </div>
    </div>
</div>

@section Scripts {

    <script type="text/javascript">

        $(window).on("load", function () {
            $(document).ready(function () {
                var passwordClear = false;
                var showPasswordButton = document.getElementById('show_password');
                showPasswordButton.onclick = function () {
                    passwordClear = !passwordClear;
                    if (passwordClear) {
                        //Change the attribute to text
                        $('#password').attr('type', 'text');
                        $('.icon').removeClass('fa fa-eye-slash').addClass('fa fa-eye');
                        showPasswordButton.style.background = "var(--main-color)";
                    }
                    else {
                        //Change the attribute back to password
                        $('#password').attr('type', 'password');
                        $('.icon').removeClass('fa fa-eye').addClass('fa fa-eye-slash');
                    }
                };
            });

            document.querySelectorAll('.form-outline').forEach((formOutline) => {
                new mdb.Input(formOutline).init();
            });
        });

    </script>
}